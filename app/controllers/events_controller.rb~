class EventsController < ApplicationController
  before_filter :authenticate_user!
  # GET /events
  # GET /events.json
  def index
    @events = Event.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @events }
    end
  end

  # GET /events/1
  # GET /events/1.json
  def show
    @event = Event.find(params[:id])
    #@post = Post.new(:event_id => @event.id)

    #@posts = Post.order("created_at desc")
    #@group.user_to_groups.each do |p|
     @user_to_event = UserToEvent.find_all_by_event_id(@event)
     @user_confirmed = UserToEvent.find_all_by_event_id_and_state(@event, 'accepted')
     @user_pending = UserToEvent.find_all_by_event_id_and_state(@event, 'request_sent')
       @user_to_event.each do |p|
        @user =  p.user_id
        @ev_ent = p.event_id
       if @user == current_user.id && @ev_ent == @event.id
          @text ="you are already a member of this group "
       end
    @activity = UserToEvent.find_all_by_event_id(@event) 
end
    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @event }
    end
  end

  # GET /events/new
  # GET /events/new.json
  def new
    @event = Event.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @event }
    end
  end

  # GET /events/1/edit
  def edit
    @event = Event.find(params[:id])
  end

  # POST /events
  # POST /events.json
  def create
    @event = Event.new(params[:event])

    respond_to do |format|
      if @event.save
        format.html { redirect_to @event, notice: 'Event was successfully created.' }
        format.json { render json: @event, status: :created, location: @event }
      else
        format.html { render action: "new" }
        format.json { render json: @event.errors, status: :unprocessable_entity }
      end
    end
  end

# for joining an event

def join
    @event = Event.find(params[:event_id])
    @e = @event.user_to_events.build(:user_id => current_user.id,
                                 :event_id => "#{@event.id}",
                                 :owner_id => "#{@event.user_id}" )

    respond_to do |format|
      if @e.save
         @total_attendence = UserToEvent.find("#{@e.id}").event.update_attributes(:no_of_guests_attending => (@event.no_of_guests_attending)+1)
        format.html { redirect_to(@event, :notice => 'Request has been sent to the meal owner.') }
        format.xml  { head :ok }
      else
        format.html { redirect_to(event_path(@event), :notice => 'Something has gone wrong , please try again.') }
        format.xml  { render :xml => @user.errors, :status => :unprocessable_entity }
      end
    end
  end



  # PUT /events/1
  # PUT /events/1.json
  def update
    @event = Event.find(params[:id])

    respond_to do |format|
      if @event.update_attributes(params[:event])
        format.html { redirect_to @event, notice: 'Event was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @event.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /events/1
  # DELETE /events/1.json
  def destroy
    @event = Event.find(params[:id])
    @event.destroy

    respond_to do |format|
      format.html { redirect_to events_url }
      format.json { head :no_content }
    end
  end
end
